version: '3.9'
services:
  app:
    container_name: Telow
    image: docker.io/node:20.10.0
    ports:
      - '3000:3000'
    volumes:
      - .:/app
      - /app/node_modules
    working_dir: /app
    command: sh -c "yarn install && yarn start"
  db:
    image: docker.io/postgres:latest
    hostname: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: unless-stopped
    volumes:
      - ./db/schemas:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/telow
    ports:
      - '1001:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U admin_user -d telow']
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: docker.io/redis:latest
    ports:
      - '6379:6379'

  hasura:
    image: docker.io/hasura/graphql-engine:latest.cli-migrations-v3
    ports:
      - '2000:8080' # You may want to change the host port to avoid conflict with authorizer service
    depends_on:
      - db
      - authorizer
    restart: always
    volumes:
      - ./hasura/metadata:/hasura-metadata
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true' # set to "false" to disable console
      HASURA_GRAPHQL_DEV_MODE: 'true' # set to "false" when in production
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_SECRET}
      HASURA_GRAPHQL_METADATA_APPLY: 'true'
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}

  authorizer:
    image: docker.io/lakhansamani/authorizer:latest
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - DATABASE_TYPE=postgres
      - ADMIN_SECRET=${AUTHORIZER_SECRET}
      - REDIS_URL=redis://redis:6379
      - GOOGLE_CLIENT_ID=${VITE_OAUTH_GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${VITE_OAUTH_GOOGLE_CLIENT_SECRET}
      - ACCESS_TOKEN_EXPIRY_TIME=${ACCESS_TOKEN_EXPIRY_TIME}
      - CUSTOM_ACCESS_TOKEN_SCRIPT=${CUSTOM_ACCESS_TOKEN_SCRIPT}
      - ROLES=${AUTHORIZER_ROLES}
      - DISABLE_MOBILE_BASIC_AUTHENTICATION=true
      - JWT_TYPE=${AUTHORIZER_JWT_TYPE}
      - JWT_SECRET=${AUTHORIZER_JWT_SECRET}
    ports:
      - '1000:8080'
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data:
